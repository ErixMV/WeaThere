{"version":3,"sources":["config/places.js","theme.js","global.js","config/enviroment.js","components/Header/index.jsx","components/SearchBar/index.jsx","components/WeatherBody/index.jsx","components/Info/index.jsx","components/Footer/index.jsx","App.jsx","index.js"],"names":["placesConf","accessibility","pinButton","clearButton","configureConf","type","language","navigator","countries","aroundLatLngViaIP","lightTheme","body","text","toggleBorder","gradient","darkTheme","GlobalStyles","createGlobalStyle","theme","dotenv","Header","className","SearchBar","forwardRef","ref","city","changeHandler","submitHandler","value","onChange","id","placeholder","WeatherBody","day","icon","highTemp","lowTemp","displayType","i","srcLogo","classes","includes","src","alt","Info","rel","target","href","Footer","minWidth","width","maxWidth","style","display","justifyContent","lineHeight","App","useState","setTheme","forecast","setForecast","setCity","error","setError","createRef","useEffect","setPlaces","a","current","places","container","configure","instancePlacesAutocomplete","on","suggestion","close","latlng","geolocation","getCurrentPosition","coords","setVal","getForecast","lat","latitude","lng","longitude","console","log","message","setTimeout","maximumAge","Infinity","timeout","getWeatherBody","dayForecast","index","componentClass","valid_date","high_temp","low_temp","weather","Date","getDay","key","renderTwoRows","getVal","axios","post","data","evt","preventDefault","map","slice","alterTheme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19bf3941.chunk.js","sourcesContent":["export const placesConf = {\r\n    accessibility: {\r\n        pinButton: {\r\n            'aria-label': 'use browser geolocation',\r\n            'tab-index': 12,\r\n        },\r\n        clearButton: {\r\n            'tab-index': 13,\r\n        }\r\n    }\r\n}\r\n\r\nexport const configureConf = {\r\n    type: \"city,country\",\r\n    language: navigator.language,\r\n    countries: [],\r\n    aroundLatLngViaIP: false\r\n}","// theme.js\r\nexport const lightTheme = {\r\n    body: '#E2E2E2',\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    gradient: 'linear-gradient(#39598A, #79D7ED)',\r\n}\r\n\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    gradient: 'linear-gradient(#091236, #1E215D)',\r\n}","// global.js\r\n\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    align-items: center;\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\r\n    transition: all 0.25s linear;\r\n  }\r\n\r\n  #root {\r\n      width: 100vw;\r\n      height: 100vh;\r\n  }\r\n`;","import * as dotenv from \"dotenv\";\r\n\r\ndotenv.config();","import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <h1>WeaThere</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, { forwardRef } from \"react\";\r\n\r\nconst SearchBar = forwardRef(({ city, changeHandler, submitHandler }, ref) => {\r\n    return (\r\n        <div className=\"search-container\">\r\n            <input className=\"cities-input\" value={city} onChange={changeHandler} type=\"search\" id=\"cities-input\" placeholder=\"Search city...\" ref={ref} />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default SearchBar;","import React from \"react\";\r\n\r\nconst WeatherBody = ({ day, icon, highTemp, lowTemp, displayType, i }) => {\r\n\r\n    const days = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];\r\n    const srcLogo = `./images/algoliaIcons/${icon}.png`;\r\n\r\n    let classes = `card ${displayType}-${i}`;\r\n\r\n    if (classes.includes(\"d-small\")) classes += \" flex-full-width\";\r\n\r\n    return (\r\n        <div className={classes}>\r\n            <div className=\"card-header\">\r\n                {days[day]}\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <img className=\"icon\" src={srcLogo} alt=\"hey\" />\r\n            </div>\r\n            <div className=\"card-footer\">\r\n                <div className=\"high-temp-container\">\r\n                    {highTemp} °C\r\n                </div>\r\n                <div className=\"low-temp-container\">\r\n                    {lowTemp} °C\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherBody;","import React from \"react\";\r\n\r\nconst Info = () => {\r\n    return (\r\n        <div className=\"info\">\r\n            <h2>How to use WeaThere?</h2>\r\n            <p>\r\n                WeaThere is a simple application made in React that allows you to check the weather forecast from many cities.\r\n            </p>\r\n            <p>\r\n                It is simple, select a city in the input and the weather forecast will be displayed.\r\n            </p>\r\n            <p className=\"src-button-container\">\r\n                <a className=\"src-button\" rel=\"noopener noreferrer\" target=\"_BLANK\" href=\"https://github.com/ErixMV/WeaThere\"><span>Source code</span></a>\r\n            </p>\r\n            {/* <div className=\"icons\" style={{ display: \"flex\", flexFlow: \"row\", justifyContent: \"center\" }}>\r\n          <ReactIcon style={{ width: \"5rem\", height: \"auto\" }} />\r\n          <AlgoliaIcon style={{ width: \"5rem\" }} />\r\n        </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Info;","import React from \"react\";\r\nimport MediaQuery from 'react-responsive';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            <MediaQuery minWidth={800}>\r\n                <div className=\"footer\">\r\n                    <div>Made by Erix</div>\r\n                    <div>© 2020 WeaThere Project</div>\r\n                    <div className=\"contact-icons\">\r\n                        <a className=\"contact\" target=\"_BLANK\" href=\"https://github.com/ErixMV\" rel=\"noopener noreferrer\"><img width=\"30\" alt=\"linkedin logo\" src=\"./images/srcLogo/github.svg\" /></a>\r\n                        <a className=\"contact\" href=\"https://www.linkedin.com/in/erixmamani/\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"linkedin logo\" src=\"./images/srcLogo/linkedin.svg\" /></a>\r\n                    </div>\r\n                </div>\r\n            </MediaQuery>\r\n            <MediaQuery maxWidth={799}>\r\n                <div className=\"footer\" style={{ display: \"inherit\" }}>\r\n                    <div>© 2020 WeaThere Project</div>\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\", lineHeight: \"2rem\" }}>\r\n                        <div>Made by Erix</div>\r\n                        <div className=\"contact-icons\">\r\n                            <a className=\"contact\" target=\"_BLANK\" href=\"https://github.com/ErixMV\" rel=\"noopener noreferrer\"><img width=\"30\" alt=\"linkedin logo\" src=\"./images/srcLogo/github.svg\" /></a>\r\n                            <a className=\"contact\" href=\"https://www.linkedin.com/in/erixmamani/\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"linkedin logo\" src=\"./images/srcLogo/linkedin.svg\" /></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </MediaQuery>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { useState, useEffect, createRef } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport MediaQuery from 'react-responsive';\nimport * as places from \"places.js\";\nimport axios from \"axios\";\n\nimport { placesConf, configureConf } from \"./config/places\";\nimport { lightTheme, darkTheme } from './theme';\nimport { GlobalStyles } from './global';\nimport \"./config/enviroment\";\n\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport WeatherBody from \"./components/WeatherBody\";\nimport Info from \"./components/Info\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n\n  const [theme, setTheme] = useState(true);\n  const [forecast, setForecast] = useState(null);\n  const [city, setCity] = useState(\"\");\n  const [error, setError] = useState(null)\n  // const [placesAutocomplete, setPlacesAutocomplete] = useState(null);\n\n  const ref = createRef();\n  const toggleTheme = () => setTheme(!theme);\n\n  useEffect(() => {\n    setPlaces();\n    // eslint-disable-next-line\n  }, []);\n\n  // Configuration Places\n  const setPlaces = async () => {\n\n    const { current } = ref;\n\n    // const { data } = await axios.post(\"/api/cities\");\n\n    const instancePlacesAutocomplete = await places({\n      // appId: data.id,\n      // apiKey: data.apikey,\n      ...placesConf,\n      container: current,\n    }).configure(configureConf);\n\n    await instancePlacesAutocomplete.on('change', ({ suggestion }) => {\n      setCity(suggestion.value);\n      instancePlacesAutocomplete.close();\n\n      submitHandler(instancePlacesAutocomplete, suggestion.latlng);\n    });\n\n    await instancePlacesAutocomplete.on('locate', () => {\n      if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(({ coords }) => {\n          setCity(\"Current location\");\n          instancePlacesAutocomplete.setVal(\"Current location\");\n          getForecast({ lat: coords.latitude, lng: coords.longitude });\n          instancePlacesAutocomplete.close();\n        }, error => {\n          console.log(error);\n          setError(`GeoLocation failed: ${error.message}`)\n          setTimeout(() => {\n            setError(\"\");\n          }, 2500);\n        }, { maximumAge: Infinity, timeout: 2000 });\n      } else {\n        setError(\"Geolocation is not available\");\n        setTimeout(() => {\n          setError(\"\");\n        }, 2500);\n      }\n    });\n\n    await instancePlacesAutocomplete.on('clear', () => {\n      instancePlacesAutocomplete.setVal(\"\");\n      setCity(\"\");\n      setForecast(false);\n    });\n\n    await instancePlacesAutocomplete.on('error', () => {\n      console.log(\"error\");\n\n      instancePlacesAutocomplete.setVal(\"\");\n      instancePlacesAutocomplete.close();\n    });\n\n    // setPlacesAutocomplete(instancePlacesAutocomplete);\n\n  };\n\n  // Render Cards\n  const getWeatherBody = (dayForecast, index, componentClass) => {\n    const { valid_date, high_temp, low_temp, weather } = dayForecast;\n    const day = new Date(valid_date).getDay();\n\n    return (\n      <WeatherBody displayType={componentClass} key={index} i={index} day={day} icon={weather.icon} highTemp={high_temp} lowTemp={low_temp} />\n    );\n  }\n\n  const renderOneRow = (dayForecast, index) => getWeatherBody(dayForecast, index, \"d-large\");\n\n  const renderTwoRows = (dayForecast, index) => getWeatherBody(dayForecast, index, \"d-medium\");\n\n  const renderRows = (dayForecast, index) => getWeatherBody(dayForecast, index, \"d-small\");\n\n\n\n\n  // Event handlers\n  // On input update\n  const changeHandler = (evt) => {\n    evt.preventDefault();\n    setCity(evt.target.value);\n  }\n\n  // On submitting\n  const submitHandler = (instancePlacesAutocomplete, latlng) => {\n    (instancePlacesAutocomplete.getVal() !== \"\") ? getForecast(latlng) : setError(\"Select a city.\");\n  };\n\n  // API Call: Get forecast by lat and lng\n  const getForecast = async ({ lat, lng }) => {\n    try {\n      const { data } = await axios.post(\"/api/forecast\", { lat: lat, lng: lng });\n      setForecast(data);\n    } catch (err) {\n      console.log(err.message);\n      setError(\"The forecast of the selected city is not available.\");\n    }\n  };\n\n  return (\n    // ThemeProvider is set for future implementations\n    <ThemeProvider theme={theme === true ? lightTheme : darkTheme}>\n\n      <Header />\n      <GlobalStyles />\n      {/* <button onClick={toggleTheme}>Toggle theme</button> */}\n      <SearchBar city={city} changeHandler={changeHandler} submitHandler={submitHandler} ref={ref} />\n      {error && <div className=\"error\">{error}</div>}\n\n      <MediaQuery minWidth={1000}>\n        {forecast &&\n          <div className=\"weather-container\">\n            {forecast.data.map(renderOneRow)}\n          </div>\n        }\n      </MediaQuery>\n\n      <MediaQuery maxWidth={999} minWidth={600}>\n        {forecast &&\n          <div className=\"weather-container\">\n            {forecast.data.slice(0, 3).map(renderTwoRows)}\n            <div className=\"break\" />\n            {forecast.data.slice(3, 5).map(renderTwoRows)}\n          </div>\n        }\n\n      </MediaQuery>\n\n      <MediaQuery maxWidth={599}>\n        {forecast &&\n          <div className=\"weather-container\">\n            {forecast.data.map(renderRows)}\n          </div>\n        }\n      </MediaQuery>\n\n      <Info />\n\n      <div></div>\n\n      <Footer alterTheme={toggleTheme} />\n\n    </ThemeProvider>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}